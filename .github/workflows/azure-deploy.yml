name: Deploy to Azure Container Instances

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_NAME: snakeregistry  # Change this to your registry name
  IMAGE_NAME: snakeroyale
  RESOURCE_GROUP: snake-royale-rg

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set deployment environment variables
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "CONTAINER_INSTANCE_NAME=snake-royale-prod-ci" >> $GITHUB_ENV
          echo "DNS_NAME_LABEL=snake-royale-prod" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "USE_HTTPS=true" >> $GITHUB_ENV
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "CONTAINER_INSTANCE_NAME=snake-royale-dev-ci" >> $GITHUB_ENV
          echo "DNS_NAME_LABEL=snake-royale-dev-pr-${{ github.event.number }}" >> $GITHUB_ENV
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "USE_HTTPS=true" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "CONTAINER_INSTANCE_NAME=snake-royale-dev-ci" >> $GITHUB_ENV
          echo "DNS_NAME_LABEL=snake-royale-dev-${{ github.run_number }}" >> $GITHUB_ENV
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "USE_HTTPS=true" >> $GITHUB_ENV
        fi
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        
    - name: Check if container exists
      id: check_container
      run: |
        if ! az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_INSTANCE_NAME }} --query "name" --output tsv > /dev/null 2>&1; then
            echo "exists=false" >> $GITHUB_OUTPUT
        else
            echo "exists=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Delete existing container (if exists)
      if: steps.check_container.outputs.exists == 'true'
      run: |
        echo "Deleting existing container..."
        az container delete \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_INSTANCE_NAME }} \
          --yes
        echo "Waiting for container to be fully deleted..."
        sleep 30
    
    - name: Deploy to Azure Container Instances
      run: |
        az container create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_INSTANCE_NAME }} \
            --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --registry-login-server ${{ env.REGISTRY_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --dns-name-label ${{ env.DNS_NAME_LABEL }} \
            --ports 3000 443 \
            --cpu 2 \
            --memory 4 \
            --environment-variables PORT=3000 NODE_ENV=${{ env.NODE_ENV }} GITHUB_SHA=${{ github.sha }} ENVIRONMENT=${{ env.ENVIRONMENT }} USE_HTTPS=${{ env.USE_HTTPS }} \
            --restart-policy Always \
            --location swedencentral \
            --os-type Linux || {
                echo "Failed to deploy the container. Check the Azure CLI logs for more details."
                exit 1
            }
          
    - name: Wait for container to be ready
      run: |
        echo "Waiting for container to start..."
        for i in {1..30}; do
          STATUS=$(az container show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_INSTANCE_NAME }} \
            --query "instanceView.state" \
            --output tsv 2>/dev/null || echo "NotFound")
          
          if [ "$STATUS" = "Running" ]; then
            echo "Container is running!"
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "Container failed to start!"
            az container logs --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_INSTANCE_NAME }}
            exit 1
          else
            echo "Container status: $STATUS (attempt $i/30)"
            sleep 10
          fi
        done
          
    - name: Get deployment URL
      run: |
        FQDN=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_INSTANCE_NAME }} \
          --query ipAddress.fqdn \
          --output tsv)
        IP=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_INSTANCE_NAME }} \
          --query ipAddress.ip \
          --output tsv)
        
        echo "üéÆ Game URL: http://$FQDN:3000"
        echo "üë• Spectator URL: http://$FQDN:3000/spectator.html"
        echo "üìç IP Address: $IP"
        echo "üåç Region: Sweden Central"
        echo "üöÄ Environment: ${{ env.ENVIRONMENT }}"
        echo "üîê HTTPS Ready: SSL termination available via Azure Application Gateway"
        
        if [ "${{ env.ENVIRONMENT }}" == "prod" ]; then
          echo "::notice title=Production Deployment Successful::Game deployed to http://$FQDN:3000"
          echo "::notice title=Stable Production URL::This URL will remain consistent across deployments"
          echo "::notice title=HTTPS Ready::Configure Azure Application Gateway for SSL termination"
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "::notice title=Development Deployment Successful::Dev environment deployed to http://$FQDN:3000"
          echo "::notice title=PR Environment::This is a temporary dev environment for PR #${{ github.event.number }}"
          echo "::notice title=HTTPS Ready::Configure Azure Application Gateway for SSL termination"
        else
          echo "::notice title=Development Deployment Successful::Dev environment deployed to http://$FQDN:3000"
          echo "::notice title=Dev Environment::This is a temporary development environment"
          echo "::notice title=HTTPS Ready::Configure Azure Application Gateway for SSL termination"
        fi
        echo "::notice title=Spectator View::Spectator view at http://$FQDN:3000/spectator.html"